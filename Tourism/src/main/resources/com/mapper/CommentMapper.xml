<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.CommentMapper">
  <resultMap id="BaseResultMap" type="com.entity.Comment">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="comment_id" jdbcType="BIGINT" property="commentId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="scenic_id" jdbcType="BIGINT" property="scenicId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from comment
    where comment_id = #{commentId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.entity.Comment">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="commentId" order="BEFORE" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into comment (comment_id, user_id, scenic_id, 
      create_time, update_time, content
      )
    values (#{commentId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{scenicId,jdbcType=BIGINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.entity.Comment">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update comment
    set user_id = #{userId,jdbcType=BIGINT},
      scenic_id = #{scenicId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where comment_id = #{commentId,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select comment_id, user_id, scenic_id, create_time, update_time, content
    from comment
    where comment_id = #{commentId,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select comment_id, user_id, scenic_id, create_time, update_time, content
    from comment
  </select>
  
  <select id="recordCount" resultType="int">
  	select count(*)
	from comment
	where del=0
  </select>
  
  <!-- 时间字段有问题，暂时不加 -->
  <select id="selectUserComment" resultType="com.entity.UserCommSce">
  	select us.user_id userId, us.username username, co.comment_id commentId, 
			co.content content, sc.scenic_id scenicId, sc.scenic_name scenicName
	from user us, comment co, scenic sc
	where co.del=0 and us.user_id=co.user_id and co.scenic_id=sc.scenic_id
	order by us.user_id
  </select>
  
  <select id="selectByScenicId" parameterType="java.lang.Long" resultMap="BaseResultMap">
  	select comment_id, scenic_id, user_id, content
    from comment
    where scenic_id=#{secnic_id, jdbcType=BIGINT}
  </select>
  
  <select id="selectByUserId" resultMap="BaseResultMap">
  	select comment_id, scenic_id, user_id, content
    from comment 
	where user_id=#{userId} and scenic_id=#{scenicId}
  </select>
  
</mapper>