<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.ScenicMapper">
  <resultMap id="BaseResultMap" type="com.entity.Scenic">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="scenic_id" jdbcType="BIGINT" property="scenicId" />
    <result column="scenic_name" jdbcType="VARCHAR" property="scenicName" />
    <result column="scenic_pos" jdbcType="VARCHAR" property="scenicPos" />
    <result column="scenic_score" jdbcType="INTEGER" property="scenicScore" />
    <result column="scenic_ticket_price" jdbcType="VARCHAR" property="scenicTicketPrice" />
    <result column="scenic_type" jdbcType="VARCHAR" property="scenicType" />
    <result column="province_id" jdbcType="BIGINT" property="provinceId" />
    <result column="city_id" jdbcType="BIGINT" property="cityId" />
    <result column="scenic_img" jdbcType="VARCHAR" property="scenicImg" />
    <result column="ticketRemainder" jdbcType="INTEGER" property="ticketRemainder" />
    <result column="del" jdbcType="INTEGER" property="del" />
  </resultMap>
  
  <resultMap id="ScenicResultMap" type="com.entity.Scenic" extends="BaseResultMap">
  	<collection property="commentList" ofType="com.entity.Comment" column="scenic_id" select="com.mapper.CommentMapper.selectByScenicId">
  		<id column="comment_id" jdbcType="BIGINT" property="commentId" />
	    <result column="scenic_id" jdbcType="BIGINT" property="scenicId" />
	    <result column="user_id" jdbcType="BIGINT" property="userId" />
	    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
	    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  	</collection>
  </resultMap>
  
  <!-- <resultMap id="ScenicResultMapByUserId" type="com.entity.Scenic" extends="BaseResultMap">
  	<collection property="commentListByUser" ofType="com.entity.Comment"
  				column="{userId=????, scenicId=scenic_id}" select="com.mapper.CommentMapper.selectByUserId">
  		<id column="comment_id" jdbcType="BIGINT" property="commentId" />
	    <result column="scenic_id" jdbcType="BIGINT" property="scenicId" />
	    <result column="user_id" jdbcType="BIGINT" property="userId" />
	    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
	    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  	</collection>
  </resultMap> -->
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from scenic
    where scenic_id = #{scenicId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.entity.Scenic">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="scenicId" order="BEFORE" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into scenic (scenic_name, scenic_pos, 
      scenic_score, scenic_ticket_price, scenic_type, 
      province_id, city_id, del
      )
    values (#{scenicName,jdbcType=VARCHAR}, #{scenicPos,jdbcType=VARCHAR}, 
      5, #{scenicTicketPrice,jdbcType=VARCHAR}, #{scenicType,jdbcType=VARCHAR}, 
      #{provinceId,jdbcType=BIGINT}, #{cityId,jdbcType=BIGINT}, 0
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.entity.Scenic">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update scenic
    set scenic_name = #{scenicName,jdbcType=VARCHAR},
      scenic_pos = #{scenicPos,jdbcType=VARCHAR},
      scenic_score = #{scenicScore,jdbcType=INTEGER},
      scenic_ticket_price = #{scenicTicketPrice,jdbcType=VARCHAR},
      scenic_type = #{scenicType,jdbcType=VARCHAR},
      province_id = #{provinceId,jdbcType=BIGINT},
      city_id = #{cityId,jdbcType=BIGINT},
      del = #{del,jdbcType=INTEGER}
    where scenic_id = #{scenicId,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select scenic_id, scenic_name, scenic_pos, scenic_score, scenic_ticket_price, scenic_type, 
    province_id, city_id, ticketRemainder, del
    from scenic
    where scenic_id = #{scenicId,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select scenic_id, scenic_name, scenic_pos, scenic_score, scenic_ticket_price, scenic_type, province_id, city_id, ticketRemainder, del
    from scenic
    where del=0
  </select>
  
  
  
  <select id="recordCount" parameterType="com.entity.Scenic" resultType="int">
  	select count(*) 
  	from scenic
  	where del = 0 
  		  <if test="scenicName != null and scenicName != '' "> and scenic_name like concat('%', #{scenicName}, '%') </if>  
  		  <if test="provinceId != null "> and province_id = #{provinceId} </if>
  		  <if test="cityId != null "> and city_id = #{cityId} </if>
  		  <if test="scenicTicketPrice != null "> and scenic_ticket_price &lt;= #{scenicTicketPrice} </if>
  		  <if test="scenicType != null and scenicType != '' "> and scenic_type like concat('%', #{scenicType}, '%') </if>
  </select>
  
  <select id="selectByMulCondition" resultMap="BaseResultMap">
  	select scenic_id, scenic_name, scenic_pos, scenic_score, scenic_ticket_price, scenic_type, province_id, city_id, ticketRemainder, del
  	from scenic
  	where del = 0 
  		  <if test="t.scenicName != null and t.scenicName != '' "> and scenic_name like concat('%', #{t.scenicName}, '%') </if>  
  		  <if test="t.provinceId != null "> and province_id = #{t.provinceId} </if>
  		  <if test="t.cityId != null "> and city_id = #{t.cityId} </if>
  		  <if test="t.scenicTicketPrice != null "> and scenic_ticket_price &lt;= #{t.scenicTicketPrice} </if>
  		  <if test="t.scenicType != null and t.scenicType != '' "> and scenic_type like concat('%', #{t.scenicType}, '%') </if>
  	limit #{vo.start}, #{vo.size}
  </select>
  
  <delete id="del">
  	update scenic set del=1 where scenic_id = #{scenicId};
  </delete>
  
  <select id="selectByMulConditionExt" resultMap="ScenicResultMap">
  	select s.scenic_id, s.scenic_name, s.scenic_type, s.scenic_pos, s.scenic_score,
	   s.scenic_ticket_price, s.scenic_img, s.ticketRemainder, p.province_name, c.city_name
	from scenic s
	left join province p on s.province_id=p.province_id
	left join city c on s.city_id=c.city_id
	where s.del=0
		<if test="t.scenicName != null and t.scenicName != '' "> and s.scenic_name like concat('%', #{t.scenicName}, '%') </if>  
	    <if test="t.provinceId != null "> and s.province_id = #{t.provinceId} </if>
	    <if test="t.cityId != null "> and s.city_id = #{t.cityId} </if>
	    <if test="t.scenicTicketPrice != null "> and s.scenic_ticket_price &lt;= #{t.scenicTicketPrice} </if>
	    <if test="t.scenicType != null and t.scenicType != '' "> and s.scenic_type like concat('%', #{t.scenicType}, '%') </if>
  	limit #{vo.start}, #{vo.size}
  </select>
  
  <select id="recordSceCountByUserId" resultType="int">
  	select count(distinct co.scenic_id) num
	from `comment` co
	where co.user_id = #{userId};
  </select>
  
  <select id="selectSceByUserId" parameterType="Long" resultMap="BaseResultMap">
  	select sc.*
	from comment co, scenic sc
	where co.user_id=#{userId} and co.scenic_id=sc.scenic_id
	group by sc.scenic_id;	
  </select>
  
  <select id="recordCollCountByUserId" resultType="int">
  	select count(*) 
  	from scenic s, collect coll
	where s.del = 0 and coll.del = 0 and #{userId} = coll.user_id and coll.scenic_id = s.scenic_id;
  		  <if test="t.scenicName != null and t.scenicName != '' "> and scenic_name like concat('%', #{t.scenicName}, '%') </if>  
  		  <if test="t.provinceId != null "> and province_id = #{t.provinceId} </if>
  		  <if test="t.cityId != null "> and city_id = #{t.cityId} </if>
  		  <if test="t.scenicTicketPrice != null "> and scenic_ticket_price &lt;= #{t.scenicTicketPrice} </if>
  		  <if test="t.scenicType != null and t.scenicType != '' "> and scenic_type like concat('%', #{t.scenicType}, '%') </if>
  </select>
  
  <select id="selectCollByByUserId" resultMap="ScenicResultMap">
  	select s.scenic_id, s.scenic_name, s.scenic_type, s.scenic_pos, s.scenic_score,
	   s.scenic_ticket_price, s.scenic_img, s.ticketRemainder, p.province_name, c.city_name
	from collect coll, scenic s
	left join province p on s.province_id=p.province_id
	left join city c on s.city_id=c.city_id
	where s.del = 0 and coll.del = 0 and #{userId} = coll.user_id and coll.scenic_id = s.scenic_id
		<if test="t.scenicName != null and t.scenicName != '' "> and s.scenic_name like concat('%', #{t.scenicName}, '%') </if>  
	    <if test="t.provinceId != null "> and s.province_id = #{t.provinceId} </if>
	    <if test="t.cityId != null "> and s.city_id = #{t.cityId} </if>
	    <if test="t.scenicTicketPrice != null "> and s.scenic_ticket_price &lt;= #{t.scenicTicketPrice} </if>
	    <if test="t.scenicType != null and t.scenicType != '' "> and s.scenic_type like concat('%', #{t.scenicType}, '%') </if>
  	limit #{vo.start}, #{vo.size}
  </select>
  
  <update id="updateTicket">
  	update scenic
  	set ticketRemainder=ticketRemainder - #{count}
	where scenic_id = #{scenicId}
  </update>
  
  <select id="ticketSceRecordCount" resultType="int">
  	select count(distinct bt.scenic_id) num
	from buyticket bt
	where bt.user_id = #{userId}
  </select>
  
  <select id="ticketSceRecord" resultMap="BaseResultMap">
  	select sc.*
	from buyticket bt, scenic sc
	where bt.user_id=#{userId} and bt.scenic_id=sc.scenic_id
	group by sc.scenic_id;
  </select>
  
  
</mapper>